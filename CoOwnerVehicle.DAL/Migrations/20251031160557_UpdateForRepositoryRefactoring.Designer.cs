// <auto-generated />
using System;
using Co_owner_Vehicle.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Co_owner_Vehicle.Migrations
{
    [DbContext(typeof(CoOwnerVehicleDbContext))]
    [Migration("20251031160557_UpdateForRepositoryRefactoring")]
    partial class UpdateForRepositoryRefactoring
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Co_owner_Vehicle.Models.BookingSchedule", b =>
                {
                    b.Property<int>("BookingScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingScheduleId"));

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ConfirmedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EstimatedMileage")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PickupLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Purpose")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ReturnLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("BookingScheduleId");

                    b.HasIndex("ConfirmedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId", "StartTime", "EndTime");

                    b.ToTable("BookingSchedules");

                    b.HasData(
                        new
                        {
                            BookingScheduleId = 1,
                            ConfirmedAt = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            ConfirmedBy = 4,
                            CreatedAt = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new DateTime(2024, 10, 29, 4, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            Purpose = "Đi công tác",
                            StartTime = new DateTime(2024, 10, 29, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            UserId = 3,
                            VehicleId = 1
                        },
                        new
                        {
                            BookingScheduleId = 2,
                            CreatedAt = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            EndTime = new DateTime(2024, 10, 31, 6, 0, 0, 0, DateTimeKind.Utc),
                            Priority = 2,
                            Purpose = "Đi du lịch cuối tuần",
                            StartTime = new DateTime(2024, 10, 31, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 1,
                            UserId = 4,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CheckInOutRecord", b =>
                {
                    b.Property<int>("CheckInOutRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInOutRecordId"));

                    b.Property<int?>("BookingScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Mileage")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("PhotoPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<string>("QRCodeData")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("VehicleCondition")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("CheckInOutRecordId");

                    b.HasIndex("BookingScheduleId");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CheckInOutRecords");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CoOwnerGroup", b =>
                {
                    b.Property<int>("CoOwnerGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CoOwnerGroupId"));

                    b.Property<DateTime?>("ActivatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("DissolutionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("DissolvedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("CoOwnerGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("VehicleId");

                    b.ToTable("CoOwnerGroups");

                    b.HasData(
                        new
                        {
                            CoOwnerGroupId = 1,
                            ActivatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Nhóm đồng sở hữu Tesla Model 3 màu đen - 3 thành viên",
                            GroupName = "Nhóm Tesla Model 3",
                            Status = 1,
                            VehicleId = 1
                        },
                        new
                        {
                            CoOwnerGroupId = 2,
                            ActivatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Nhóm đồng sở hữu Toyota Prius hybrid - 3 thành viên",
                            GroupName = "Nhóm Toyota Prius",
                            Status = 1,
                            VehicleId = 2
                        },
                        new
                        {
                            CoOwnerGroupId = 3,
                            ActivatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Nhóm đồng sở hữu Honda Civic sedan - 2 thành viên",
                            GroupName = "Nhóm Honda Civic",
                            Status = 1,
                            VehicleId = 3
                        },
                        new
                        {
                            CoOwnerGroupId = 4,
                            ActivatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 1,
                            Description = "Nhóm đồng sở hữu VinFast VF8 SUV điện - 2 thành viên",
                            GroupName = "Nhóm VinFast VF8",
                            Status = 1,
                            VehicleId = 4
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CommonFund", b =>
                {
                    b.Property<int>("CommonFundId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommonFundId"));

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("CurrentBalance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("FundName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("FundType")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("TargetAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CommonFundId");

                    b.HasIndex("CoOwnerGroupId");

                    b.ToTable("CommonFunds");

                    b.HasData(
                        new
                        {
                            CommonFundId = 1,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentBalance = 5000000m,
                            Description = "Quỹ chung cho chi phí vận hành xe Tesla",
                            FundName = "Quỹ chung Tesla Model 3",
                            FundType = 1,
                            IsActive = true,
                            TargetAmount = 10000000m
                        },
                        new
                        {
                            CommonFundId = 2,
                            CoOwnerGroupId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentBalance = 3000000m,
                            Description = "Quỹ chung cho chi phí vận hành xe Toyota",
                            FundName = "Quỹ chung Toyota Prius",
                            FundType = 1,
                            IsActive = true,
                            TargetAmount = 8000000m
                        },
                        new
                        {
                            CommonFundId = 3,
                            CoOwnerGroupId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentBalance = 2000000m,
                            Description = "Quỹ chung cho chi phí vận hành xe Honda",
                            FundName = "Quỹ chung Honda Civic",
                            FundType = 1,
                            IsActive = true,
                            TargetAmount = 5000000m
                        },
                        new
                        {
                            CommonFundId = 4,
                            CoOwnerGroupId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentBalance = 4000000m,
                            Description = "Quỹ chung cho chi phí vận hành xe VinFast",
                            FundName = "Quỹ chung VinFast VF8",
                            FundType = 1,
                            IsActive = true,
                            TargetAmount = 9000000m
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.EContract", b =>
                {
                    b.Property<int>("EContractId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EContractId"));

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<string>("ContractContent")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContractFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ContractTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DigitalSignature")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("SignedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("SignedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("TerminatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EContractId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("SignedBy");

                    b.ToTable("EContracts");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Expense", b =>
                {
                    b.Property<int>("ExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ApprovedBy")
                        .HasColumnType("int");

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("ExpenseCategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpenseDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExpenseTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ReceiptPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("SplitMethod")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("ExpenseId");

                    b.HasIndex("ApprovedBy");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("ExpenseCategoryId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Expenses");

                    b.HasData(
                        new
                        {
                            ExpenseId = 1,
                            Amount = 500000m,
                            ApprovedAt = new DateTime(2024, 10, 23, 0, 0, 0, 0, DateTimeKind.Utc),
                            ApprovedBy = 3,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Phí sạc điện tháng 10/2024",
                            ExpenseCategoryId = 1,
                            ExpenseDate = new DateTime(2024, 10, 18, 0, 0, 0, 0, DateTimeKind.Utc),
                            ExpenseTitle = "Phí sạc điện tháng 10/2024",
                            SplitMethod = 1,
                            Status = 2,
                            VehicleId = 1
                        },
                        new
                        {
                            ExpenseId = 2,
                            Amount = 2000000m,
                            ApprovedAt = new DateTime(2024, 10, 13, 0, 0, 0, 0, DateTimeKind.Utc),
                            ApprovedBy = 3,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Bảo dưỡng định kỳ 15,000km",
                            ExpenseCategoryId = 2,
                            ExpenseDate = new DateTime(2024, 10, 8, 0, 0, 0, 0, DateTimeKind.Utc),
                            ExpenseTitle = "Bảo dưỡng định kỳ 15,000km",
                            SplitMethod = 1,
                            Status = 2,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.ExpenseCategory", b =>
                {
                    b.Property<int>("ExpenseCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExpenseCategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CategoryType")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("ExpenseCategoryId");

                    b.ToTable("ExpenseCategories");

                    b.HasData(
                        new
                        {
                            ExpenseCategoryId = 1,
                            CategoryName = "Phí sạc điện",
                            CategoryType = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí sạc điện cho xe điện",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 2,
                            CategoryName = "Bảo dưỡng định kỳ",
                            CategoryType = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí bảo dưỡng định kỳ",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 3,
                            CategoryName = "Bảo hiểm xe",
                            CategoryType = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Phí bảo hiểm phương tiện",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 4,
                            CategoryName = "Đăng kiểm",
                            CategoryType = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Phí đăng kiểm phương tiện",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 5,
                            CategoryName = "Vệ sinh xe",
                            CategoryType = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí vệ sinh và làm sạch xe",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 6,
                            CategoryName = "Sửa chữa",
                            CategoryType = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí sửa chữa khi có hỏng hóc",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 7,
                            CategoryName = "Nhiên liệu",
                            CategoryType = 7,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí nhiên liệu (xăng, dầu)",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 8,
                            CategoryName = "Phí đỗ xe",
                            CategoryType = 8,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chi phí đỗ xe tại các bãi đỗ",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 9,
                            CategoryName = "Phí cầu đường",
                            CategoryType = 9,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Phí cầu đường và cao tốc",
                            IsActive = true
                        },
                        new
                        {
                            ExpenseCategoryId = 10,
                            CategoryName = "Khác",
                            CategoryType = 10,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Các chi phí khác",
                            IsActive = true
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.FinancialReport", b =>
                {
                    b.Property<int>("FinancialReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FinancialReportId"));

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("GeneratedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("GeneratedBy")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("OutstandingAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ReportData")
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReportFilePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ReportPeriod")
                        .HasColumnType("int");

                    b.Property<string>("ReportTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ReportType")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalExpenses")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPayments")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("FinancialReportId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("GeneratedBy");

                    b.ToTable("FinancialReports");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.FundTransaction", b =>
                {
                    b.Property<int>("FundTransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FundTransactionId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CommonFundId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("ProcessedBy")
                        .HasColumnType("int");

                    b.Property<int?>("RelatedExpenseId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("FundTransactionId");

                    b.HasIndex("CommonFundId");

                    b.HasIndex("ProcessedBy");

                    b.HasIndex("RelatedExpenseId");

                    b.ToTable("FundTransactions");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.GroupMember", b =>
                {
                    b.Property<int>("GroupMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupMemberId"));

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("InvitedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("InvitedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("JoinedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LeaveReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("LeftAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("GroupMemberId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("InvitedBy");

                    b.HasIndex("UserId");

                    b.ToTable("GroupMembers");

                    b.HasData(
                        new
                        {
                            GroupMemberId = 1,
                            CoOwnerGroupId = 1,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 2,
                            Status = 1,
                            UserId = 3
                        },
                        new
                        {
                            GroupMemberId = 2,
                            CoOwnerGroupId = 1,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 4
                        },
                        new
                        {
                            GroupMemberId = 3,
                            CoOwnerGroupId = 1,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 5
                        },
                        new
                        {
                            GroupMemberId = 4,
                            CoOwnerGroupId = 2,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 2,
                            Status = 1,
                            UserId = 4
                        },
                        new
                        {
                            GroupMemberId = 5,
                            CoOwnerGroupId = 2,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 5
                        },
                        new
                        {
                            GroupMemberId = 6,
                            CoOwnerGroupId = 2,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 6
                        },
                        new
                        {
                            GroupMemberId = 7,
                            CoOwnerGroupId = 3,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 2,
                            Status = 1,
                            UserId = 7
                        },
                        new
                        {
                            GroupMemberId = 8,
                            CoOwnerGroupId = 3,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 8
                        },
                        new
                        {
                            GroupMemberId = 9,
                            CoOwnerGroupId = 4,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 2,
                            Status = 1,
                            UserId = 3
                        },
                        new
                        {
                            GroupMemberId = 10,
                            CoOwnerGroupId = 4,
                            JoinedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Role = 1,
                            Status = 1,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.OwnershipShare", b =>
                {
                    b.Property<int>("OwnershipShareId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OwnershipShareId"));

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EffectiveFrom")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EffectiveTo")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("InvestmentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal>("Percentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("OwnershipShareId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("OwnershipShares");

                    b.HasData(
                        new
                        {
                            OwnershipShareId = 1,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 480000000m,
                            IsActive = true,
                            Percentage = 40.00m,
                            UserId = 3
                        },
                        new
                        {
                            OwnershipShareId = 2,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 420000000m,
                            IsActive = true,
                            Percentage = 35.00m,
                            UserId = 4
                        },
                        new
                        {
                            OwnershipShareId = 3,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 300000000m,
                            IsActive = true,
                            Percentage = 25.00m,
                            UserId = 5
                        },
                        new
                        {
                            OwnershipShareId = 4,
                            CoOwnerGroupId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 400000000m,
                            IsActive = true,
                            Percentage = 50.00m,
                            UserId = 4
                        },
                        new
                        {
                            OwnershipShareId = 5,
                            CoOwnerGroupId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 240000000m,
                            IsActive = true,
                            Percentage = 30.00m,
                            UserId = 5
                        },
                        new
                        {
                            OwnershipShareId = 6,
                            CoOwnerGroupId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 160000000m,
                            IsActive = true,
                            Percentage = 20.00m,
                            UserId = 6
                        },
                        new
                        {
                            OwnershipShareId = 7,
                            CoOwnerGroupId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 360000000m,
                            IsActive = true,
                            Percentage = 60.00m,
                            UserId = 7
                        },
                        new
                        {
                            OwnershipShareId = 8,
                            CoOwnerGroupId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 240000000m,
                            IsActive = true,
                            Percentage = 40.00m,
                            UserId = 8
                        },
                        new
                        {
                            OwnershipShareId = 9,
                            CoOwnerGroupId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 630000000m,
                            IsActive = true,
                            Percentage = 70.00m,
                            UserId = 3
                        },
                        new
                        {
                            OwnershipShareId = 10,
                            CoOwnerGroupId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            EffectiveFrom = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            InvestmentAmount = 270000000m,
                            IsActive = true,
                            Percentage = 30.00m,
                            UserId = 7
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.Property<string>("FailureReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentMethod")
                        .HasColumnType("int");

                    b.Property<string>("PaymentReference")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("PaymentId");

                    b.HasIndex("ExpenseId");

                    b.HasIndex("TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            RoleId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Quản trị viên hệ thống",
                            IsActive = true,
                            RoleName = "Admin"
                        },
                        new
                        {
                            RoleId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Nhân viên vận hành",
                            IsActive = true,
                            RoleName = "Staff"
                        },
                        new
                        {
                            RoleId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Chủ xe đồng sở hữu",
                            IsActive = true,
                            RoleName = "Co-owner"
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.ServiceRecord", b =>
                {
                    b.Property<int>("ServiceRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ServiceRecordId"));

                    b.Property<decimal?>("ActualCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuesFound")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("PerformedBy")
                        .HasColumnType("int");

                    b.Property<string>("Recommendations")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime>("ScheduledDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ServiceNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleServiceId")
                        .HasColumnType("int");

                    b.Property<string>("VendorName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("ServiceRecordId");

                    b.HasIndex("PerformedBy");

                    b.HasIndex("VehicleId");

                    b.HasIndex("VehicleServiceId");

                    b.ToTable("ServiceRecords");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UsageAnalytics", b =>
                {
                    b.Property<int>("UsageAnalyticsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UsageAnalyticsId"));

                    b.Property<string>("AIRecommendations")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime>("AnalysisDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("AnalysisNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("BookingCount")
                        .HasColumnType("int");

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<decimal>("FairnessScore")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("OwnershipPercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("TotalMileage")
                        .HasColumnType("int");

                    b.Property<int>("TotalUsageHours")
                        .HasColumnType("int");

                    b.Property<decimal>("UsagePercentage")
                        .HasPrecision(5, 2)
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UsageAnalyticsId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("UsageAnalytics");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("CitizenId")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("DriverLicenseNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("UserId");

                    b.HasIndex("CitizenId");

                    b.HasIndex("DriverLicenseNumber");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "admin@coowner.com",
                            FirstName = "Admin",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "System",
                            PasswordHash = "admin123",
                            PhoneNumber = "0901234567"
                        },
                        new
                        {
                            UserId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Email = "staff@coowner.com",
                            FirstName = "Staff",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "Operator",
                            PasswordHash = "staff123",
                            PhoneNumber = "0905555555"
                        },
                        new
                        {
                            UserId = 3,
                            Address = "123 Đường ABC, Quận 1, TP.HCM",
                            CitizenId = "123456789",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL123456",
                            Email = "nguyenvana@email.com",
                            FirstName = "Nguyễn Văn",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "A",
                            PasswordHash = "user123",
                            PhoneNumber = "0901111111"
                        },
                        new
                        {
                            UserId = 4,
                            Address = "456 Đường XYZ, Quận 2, TP.HCM",
                            CitizenId = "987654321",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1985, 8, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL789012",
                            Email = "tranthib@email.com",
                            FirstName = "Trần Thị",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "B",
                            PasswordHash = "user123",
                            PhoneNumber = "0902222222"
                        },
                        new
                        {
                            UserId = 5,
                            Address = "789 Đường DEF, Quận 3, TP.HCM",
                            CitizenId = "456789123",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1992, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL345678",
                            Email = "levanc@email.com",
                            FirstName = "Lê Văn",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "C",
                            PasswordHash = "user123",
                            PhoneNumber = "0903333333"
                        },
                        new
                        {
                            UserId = 6,
                            Address = "321 Đường GHI, Quận 4, TP.HCM",
                            CitizenId = "789123456",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1988, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL901234",
                            Email = "phamthid@email.com",
                            FirstName = "Phạm Thị",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "D",
                            PasswordHash = "user123",
                            PhoneNumber = "0904444444"
                        },
                        new
                        {
                            UserId = 7,
                            Address = "555 Đường JKL, Quận 5, TP.HCM",
                            CitizenId = "111222333",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1987, 7, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL567890",
                            Email = "hoangvane@email.com",
                            FirstName = "Hoàng Văn",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "E",
                            PasswordHash = "user123",
                            PhoneNumber = "0906666666"
                        },
                        new
                        {
                            UserId = 8,
                            Address = "777 Đường MNO, Quận 6, TP.HCM",
                            CitizenId = "444555666",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            DateOfBirth = new DateTime(1991, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DriverLicenseNumber = "DL123789",
                            Email = "vothif@email.com",
                            FirstName = "Võ Thị",
                            IsActive = true,
                            IsVerified = true,
                            LastName = "F",
                            PasswordHash = "user123",
                            PhoneNumber = "0907777777"
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRoleId"));

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 1,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 1,
                            UserId = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 2,
                            UserId = 2
                        },
                        new
                        {
                            UserRoleId = 3,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 3
                        },
                        new
                        {
                            UserRoleId = 4,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 4
                        },
                        new
                        {
                            UserRoleId = 5,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 5
                        },
                        new
                        {
                            UserRoleId = 6,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 6
                        },
                        new
                        {
                            UserRoleId = 7,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 7
                        },
                        new
                        {
                            UserRoleId = 8,
                            AssignedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsActive = true,
                            RoleId = 3,
                            UserId = 8
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UserVerification", b =>
                {
                    b.Property<int>("UserVerificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserVerificationId"));

                    b.Property<string>("DocumentPath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("RejectionReason")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ReviewedBy")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VerificationType")
                        .HasColumnType("int");

                    b.HasKey("UserVerificationId");

                    b.HasIndex("ReviewedBy");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerifications");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Vehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleId"));

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Color")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CurrentMileage")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("EngineNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("PurchasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("VIN")
                        .HasMaxLength(17)
                        .HasColumnType("nvarchar(17)");

                    b.Property<int>("VehicleType")
                        .HasColumnType("int");

                    b.Property<int?>("Year")
                        .HasColumnType("int");

                    b.HasKey("VehicleId");

                    b.HasIndex("LicensePlate")
                        .IsUnique();

                    b.HasIndex("VIN");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            VehicleId = 1,
                            Brand = "Tesla",
                            Color = "Đen",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentMileage = 15000,
                            Description = "Tesla Model 3 màu đen, xe điện cao cấp",
                            LicensePlate = "30A-12345",
                            Model = "Model 3",
                            PurchaseDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 1200000000m,
                            Status = 1,
                            VIN = "1HGBH41JXMN109186",
                            VehicleType = 1,
                            Year = 2023
                        },
                        new
                        {
                            VehicleId = 2,
                            Brand = "Toyota",
                            Color = "Trắng",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentMileage = 25000,
                            Description = "Toyota Prius hybrid, tiết kiệm nhiên liệu",
                            LicensePlate = "30B-67890",
                            Model = "Prius",
                            PurchaseDate = new DateTime(2022, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 800000000m,
                            Status = 1,
                            VIN = "1HGBH41JXMN109187",
                            VehicleType = 2,
                            Year = 2022
                        },
                        new
                        {
                            VehicleId = 3,
                            Brand = "Honda",
                            Color = "Xám",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentMileage = 35000,
                            Description = "Honda Civic sedan, động cơ xăng",
                            LicensePlate = "30C-11111",
                            Model = "Civic",
                            PurchaseDate = new DateTime(2021, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 600000000m,
                            Status = 1,
                            VIN = "1HGBH41JXMN109188",
                            VehicleType = 3,
                            Year = 2021
                        },
                        new
                        {
                            VehicleId = 4,
                            Brand = "VinFast",
                            Color = "Xanh",
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            CurrentMileage = 8000,
                            Description = "VinFast VF8 SUV điện, thương hiệu Việt Nam",
                            LicensePlate = "30D-22222",
                            Model = "VF8",
                            PurchaseDate = new DateTime(2023, 5, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            PurchasePrice = 900000000m,
                            Status = 1,
                            VIN = "1HGBH41JXMN109189",
                            VehicleType = 1,
                            Year = 2023
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VehicleService", b =>
                {
                    b.Property<int>("VehicleServiceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleServiceId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal?>("EstimatedCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("EstimatedDurationMinutes")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("ServiceName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("ServiceType")
                        .HasColumnType("int");

                    b.HasKey("VehicleServiceId");

                    b.ToTable("VehicleServices");

                    b.HasData(
                        new
                        {
                            VehicleServiceId = 1,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thay dầu, lọc gió, kiểm tra hệ thống",
                            EstimatedCost = 2000000m,
                            EstimatedDurationMinutes = 120,
                            IsActive = true,
                            ServiceName = "Bảo dưỡng định kỳ 10,000km",
                            ServiceType = 1
                        },
                        new
                        {
                            VehicleServiceId = 2,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Thay dầu, lọc gió, kiểm tra phanh, hệ thống điện",
                            EstimatedCost = 3500000m,
                            EstimatedDurationMinutes = 180,
                            IsActive = true,
                            ServiceName = "Bảo dưỡng định kỳ 20,000km",
                            ServiceType = 1
                        },
                        new
                        {
                            VehicleServiceId = 3,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kiểm tra tình trạng pin, hệ thống sạc",
                            EstimatedCost = 1500000m,
                            EstimatedDurationMinutes = 90,
                            IsActive = true,
                            ServiceName = "Kiểm tra pin xe điện",
                            ServiceType = 3
                        },
                        new
                        {
                            VehicleServiceId = 4,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Vệ sinh ghế, dashboard, sàn xe",
                            EstimatedCost = 500000m,
                            EstimatedDurationMinutes = 60,
                            IsActive = true,
                            ServiceName = "Vệ sinh nội thất",
                            ServiceType = 4
                        },
                        new
                        {
                            VehicleServiceId = 5,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Rửa xe, đánh bóng, bảo vệ sơn",
                            EstimatedCost = 300000m,
                            EstimatedDurationMinutes = 45,
                            IsActive = true,
                            ServiceName = "Rửa xe ngoại thất",
                            ServiceType = 4
                        },
                        new
                        {
                            VehicleServiceId = 6,
                            CreatedAt = new DateTime(2024, 1, 1, 0, 0, 0, 0, DateTimeKind.Utc),
                            Description = "Kiểm tra và sửa chữa hệ thống phanh",
                            EstimatedCost = 5000000m,
                            EstimatedDurationMinutes = 240,
                            IsActive = true,
                            ServiceName = "Sửa chữa hệ thống phanh",
                            ServiceType = 2
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VehicleUsageHistory", b =>
                {
                    b.Property<int>("VehicleUsageHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VehicleUsageHistoryId"));

                    b.Property<int?>("BookingScheduleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("EndLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("EndMileage")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IssuesReported")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("StartLocation")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("StartMileage")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("UsageNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("VehicleUsageHistoryId");

                    b.HasIndex("BookingScheduleId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleUsageHistories");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Vote", b =>
                {
                    b.Property<int>("VoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoteId"));

                    b.Property<int>("Choice")
                        .HasColumnType("int");

                    b.Property<string>("Comments")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VotedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("VotingSessionId")
                        .HasColumnType("int");

                    b.HasKey("VoteId");

                    b.HasIndex("UserId");

                    b.HasIndex("VotingSessionId", "UserId")
                        .IsUnique();

                    b.ToTable("Votes");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VotingSession", b =>
                {
                    b.Property<int>("VotingSessionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VotingSessionId"));

                    b.Property<int?>("AbstainVotes")
                        .HasColumnType("int");

                    b.Property<int>("CoOwnerGroupId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DecisionType")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPassed")
                        .HasColumnType("bit");

                    b.Property<int?>("NoVotes")
                        .HasColumnType("int");

                    b.Property<int?>("RequiredVotes")
                        .HasColumnType("int");

                    b.Property<string>("ResultNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("YesVotes")
                        .HasColumnType("int");

                    b.HasKey("VotingSessionId");

                    b.HasIndex("CoOwnerGroupId");

                    b.HasIndex("CreatedBy");

                    b.ToTable("VotingSessions");

                    b.HasData(
                        new
                        {
                            VotingSessionId = 1,
                            AbstainVotes = 0,
                            CoOwnerGroupId = 1,
                            CreatedAt = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            CreatedBy = 3,
                            DecisionType = 8,
                            Description = "Thảo luận và bỏ phiếu về việc nâng cấp hệ thống âm thanh cho xe Tesla",
                            EndDate = new DateTime(2024, 11, 4, 0, 0, 0, 0, DateTimeKind.Utc),
                            IsPassed = false,
                            NoVotes = 0,
                            StartDate = new DateTime(2024, 10, 28, 0, 0, 0, 0, DateTimeKind.Utc),
                            Status = 2,
                            Title = "Bỏ phiếu về việc nâng cấp hệ thống âm thanh",
                            YesVotes = 0
                        });
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.BookingSchedule", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "ConfirmedByUser")
                        .WithMany()
                        .HasForeignKey("ConfirmedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("BookingSchedules")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("BookingSchedules")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ConfirmedByUser");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CheckInOutRecord", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.BookingSchedule", "BookingSchedule")
                        .WithMany()
                        .HasForeignKey("BookingScheduleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Co_owner_Vehicle.Models.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("CheckInOutRecords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("CheckInOutRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingSchedule");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CoOwnerGroup", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("CoOwnerGroups")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CommonFund", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("CommonFunds")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CoOwnerGroup");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.EContract", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("EContracts")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.User", "SignedByUser")
                        .WithMany()
                        .HasForeignKey("SignedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("CreatedByUser");

                    b.Navigation("SignedByUser");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Expense", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "ApprovedByUser")
                        .WithMany()
                        .HasForeignKey("ApprovedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("Expenses")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.ExpenseCategory", "ExpenseCategory")
                        .WithMany("Expenses")
                        .HasForeignKey("ExpenseCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("Expenses")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ApprovedByUser");

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("ExpenseCategory");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.FinancialReport", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("FinancialReports")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "GeneratedByUser")
                        .WithMany()
                        .HasForeignKey("GeneratedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("GeneratedByUser");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.FundTransaction", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CommonFund", "CommonFund")
                        .WithMany("FundTransactions")
                        .HasForeignKey("CommonFundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.Expense", "RelatedExpense")
                        .WithMany()
                        .HasForeignKey("RelatedExpenseId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CommonFund");

                    b.Navigation("ProcessedByUser");

                    b.Navigation("RelatedExpense");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.GroupMember", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("GroupMembers")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "InvitedByUser")
                        .WithMany()
                        .HasForeignKey("InvitedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("GroupMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("InvitedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.OwnershipShare", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("OwnershipShares")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Payment", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.Expense", "Expense")
                        .WithMany("Payments")
                        .HasForeignKey("ExpenseId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Expense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.ServiceRecord", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.VehicleService", "VehicleService")
                        .WithMany("ServiceRecords")
                        .HasForeignKey("VehicleServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PerformedByUser");

                    b.Navigation("Vehicle");

                    b.Navigation("VehicleService");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UsageAnalytics", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany()
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UserRole", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.UserVerification", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "ReviewedByUser")
                        .WithMany()
                        .HasForeignKey("ReviewedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("UserVerifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ReviewedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VehicleUsageHistory", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.BookingSchedule", "BookingSchedule")
                        .WithMany("VehicleUsageHistories")
                        .HasForeignKey("BookingScheduleId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleUsageHistories")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingSchedule");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Vote", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.User", "User")
                        .WithMany("Votes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.VotingSession", "VotingSession")
                        .WithMany("Votes")
                        .HasForeignKey("VotingSessionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VotingSession");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VotingSession", b =>
                {
                    b.HasOne("Co_owner_Vehicle.Models.CoOwnerGroup", "CoOwnerGroup")
                        .WithMany("VotingSessions")
                        .HasForeignKey("CoOwnerGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Co_owner_Vehicle.Models.User", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("CoOwnerGroup");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.BookingSchedule", b =>
                {
                    b.Navigation("VehicleUsageHistories");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CoOwnerGroup", b =>
                {
                    b.Navigation("CommonFunds");

                    b.Navigation("EContracts");

                    b.Navigation("Expenses");

                    b.Navigation("FinancialReports");

                    b.Navigation("GroupMembers");

                    b.Navigation("OwnershipShares");

                    b.Navigation("VotingSessions");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.CommonFund", b =>
                {
                    b.Navigation("FundTransactions");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Expense", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.ExpenseCategory", b =>
                {
                    b.Navigation("Expenses");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.User", b =>
                {
                    b.Navigation("BookingSchedules");

                    b.Navigation("CheckInOutRecords");

                    b.Navigation("GroupMembers");

                    b.Navigation("Payments");

                    b.Navigation("UserRoles");

                    b.Navigation("UserVerifications");

                    b.Navigation("Votes");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.Vehicle", b =>
                {
                    b.Navigation("BookingSchedules");

                    b.Navigation("CheckInOutRecords");

                    b.Navigation("CoOwnerGroups");

                    b.Navigation("Expenses");

                    b.Navigation("ServiceRecords");

                    b.Navigation("VehicleUsageHistories");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VehicleService", b =>
                {
                    b.Navigation("ServiceRecords");
                });

            modelBuilder.Entity("Co_owner_Vehicle.Models.VotingSession", b =>
                {
                    b.Navigation("Votes");
                });
#pragma warning restore 612, 618
        }
    }
}
